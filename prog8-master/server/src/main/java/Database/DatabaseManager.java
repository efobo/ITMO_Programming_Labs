package Database;

import app.Main;

import java.sql.*;
import java.util.logging.Level;

public class DatabaseManager {
    // Поля основной таблицы LABWORKS
    public static final String labworkTableName = "labworks";
    public static final String labworkTable_id = "id";
    public static final String labworkTable_name = "Name";
    public static final String labworkTable_CreationDate = "CreationDate";
    public static final String labworkTable_MinimalPoint = "Minimal_Point";
    public static final String labworksTable_Difficulty = "Difficulty";
    public static final String labworksTable_PersonID = "Person_id";
    public static final String labworksTable_userID = "user_id";

    // Поля таблицы COORDINATES
    public static final String coordinatesTableName = "coordinates";
    public static final String coordinatesTable_CoordinatesID = "id";
    public static final String coordinatesTable_LabworkID = "labwork_id";
    public static final String coordinatesTable_X_Coordinate = "X_Coordinate";
    public static final String coordinatesTable_Y_Coordinate = "Y_Coordinate";

    // Поля таблицы PERSON
    public static final String personTableName = "person";
    public static final String personTable_PersonID = "id";
    public static final String personTable_PersonName = "Name";
    public static final String personTable_Birthday = "Birthday";
    public static final String personTable_EyeColor = "Eye_Color";
    public static final String personTable_HairColor = "Hair_Color";
    public static final String personTable_LocationID = "Location_id";

    //Поля таблицы LOCATION
    public static final String locationTableName = "location";
    public static final String locationTable_LocationID = "id";
    public static final String locationTable_LocationName = "Name";
    public static final String locationTable_X_LocationCoordinate = "X_Location_Coordinate";
    public static final String locationTable_Y_LocationCoordinate = "Y_Location_Coordinate";

    //Поля таблицы USERS
    public static final String userTableName = "users";
    public static final String userTable_userID = "id";
    public static final String userTable_Login = "login";
    public static final String userTable_Password = "password";

    private final String JDBC_driver = "org.postgresql.Driver";

    private String url;
    private String user;
    private String password;
    private Connection connection;

    public DatabaseManager (String url, String user, String password) {
        this.url = url;
        this.user = user;
        this.password = password;
        connectToDatabase();
    }

    private void connectToDatabase () {
        try {
            Class.forName(JDBC_driver);
            connection = DriverManager.getConnection(url, user, password);
            System.out.println("Соединение с базой данных установлено");
            Main.logger.log(Level.INFO, "Соединение с базой данных установлено");
        } catch (SQLException throwables) {
            System.out.println("Ошибка при подключении к базе данных");
            Main.logger.log(Level.SEVERE, "Ошибка при подключении к базе данных");
            Main.logger.log(Level.SEVERE, throwables.getMessage());
        } catch (ClassNotFoundException e) {
            System.out.println("Драйвер управления базой данных не найден");
            Main.logger.log(Level.SEVERE, "Драйвер управления базой данных не найден");
            Main.logger.log(Level.SEVERE, e.getMessage());

        }
    }

    public PreparedStatement getPreparedStatement(String sqlStatement, boolean generateKeys) throws SQLException {
        PreparedStatement preparedStatement;

        try {
            if (connection == null) throw new SQLException();
            int autoGeneratedKeys = generateKeys ? Statement.RETURN_GENERATED_KEYS : Statement.NO_GENERATED_KEYS;
            preparedStatement = connection.prepareStatement(sqlStatement, autoGeneratedKeys);
            return preparedStatement;
        } catch (SQLException e) {
            if (connection == null) Main.logger.log(Level.SEVERE, "Соединение с базой данных не установлено");
            throw new SQLException(e);
        }
    }

    public void closePreparedStatement(PreparedStatement sqlStatement) {
        if (sqlStatement == null) return;
        try {
            sqlStatement.close();
            Main.logger.log(Level.INFO, "Закрыт SQL запрос '" + sqlStatement + "'.");
        } catch (SQLException exception) {
            Main.logger.log(Level.SEVERE, "Произошла ошибка при закрытии SQL запроса '" + sqlStatement + "'.");
        }
    }


    public void closeConnection() {
        if (connection == null) return;
        try {
            connection.close();
            System.out.println("Соединение с базой данных разорвано.");
            Main.logger.log(Level.INFO, "Соединение с базой данных разорвано.");
        } catch (SQLException exception) {
            System.out.println("Произошла ошибка при разрыве соединения с базой данных!");
            Main.logger.log(Level.SEVERE, "Произошла ошибка при разрыве соединения с базой данных!");
        }
    }

    public void setCommitMode() {
        try {
            if (connection == null) throw new SQLException();
            connection.setAutoCommit(false);
        } catch (SQLException exception) {
            Main.logger.log(Level.SEVERE, "Произошла ошибка при установлении режима транзакции базы данных!");
        }
    }

    public void setNormalMode() {
        try {
            if (connection == null) throw new SQLException();
            connection.setAutoCommit(true);
        } catch (SQLException exception) {
            Main.logger.log(Level.SEVERE, "Произошла ошибка при установлении нормального режима базы данных");
        }
    }

    public void commit() {
        try {
            if (connection == null) throw new SQLException();
            connection.commit();
        } catch (SQLException exception) {
            Main.logger.log(Level.SEVERE, "Произошла ошибка при подтверждении нового состояния базы данных!");
        }
    }

    public void rollback() {
        try {
            if (connection == null) throw new SQLException();
            connection.rollback();
        } catch (SQLException exception) {
            Main.logger.log(Level.SEVERE, "Произошла ошибка при возврате исходного состояния базы данных!");
        }
    }

    public void setSavepoint() {
        try {
            if (connection == null) throw new SQLException();
            connection.setSavepoint();
        } catch (SQLException exception) {
            Main.logger.log(Level.SEVERE, "Произошла ошибка при сохранении состояния базы данных!");
        }
    }
}
